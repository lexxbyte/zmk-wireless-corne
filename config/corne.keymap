#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <30>;
        };

        layer_mod: layer_modifier {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <125>;
            bindings = <&kp>, <&tog>;
        };

        mod_sticky_layer: mod_sticky_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sl>;  
        };

        caps_word_mod: caps_word_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&caps_word>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            timeout-ms = <75>;
            key-positions = <23 24>;
        };

        delete_word {
            bindings = <&delete_word_macos>;
            timeout-ms = <75>;
            key-positions = <17 23>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            timeout-ms = <75>;
            key-positions = <15 16 4>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            timeout-ms = <75>;
            key-positions = <25 24 8>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            timeout-ms = <75>;
            key-positions = <16 15 17>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            timeout-ms = <75>;
            key-positions = <23 24 25>;
        };

        left_curly {
            bindings = <&kp LEFT_BRACE>;
            timeout-ms = <75>;
            key-positions = <15 16 32>;
        };

        right_curly {
            bindings = <&kp RBRC>;
            timeout-ms = <75>;
            key-positions = <24 25 37>;
        };

        equlas_arrow {
            bindings = <&equals_arrow>;
            timeout-ms = <75>;
            key-positions = <14 15 16 17>;
        };

        minus_arrow {
            bindings = <&minus_arrow>;
            timeout-ms = <75>;
            key-positions = <23 24 25 26>;
        };
    };

    macros {
        delete_word_macos: delet_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(BACKSPACE)>;
            label = "DELET_WORD";
        };

        equals_arrow: equals_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "EQUALS_ARROW";
        };

        minus_arrow: minus_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MINUS_ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&tog 3              &kp Q  &kp W  &kp E         &kp R          &kp T                                      &mmv MOVE_UP                     &kp Y        &kp U           &kp I      &kp O    &kp P     &kp BACKSLASH
&mt LEFT_SHIFT TAB  &kp A  &kp S  &kp D         &kp F          &kp G                      &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp H        &kp J           &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_COMMAND    &kp Z  &kp X  &kp C         &kp V          &kp B        &kp C_MUTE                    &mmv MOVE_DOWN                   &kp N        &kp M           &kp COMMA  &kp DOT  &kp FSLH  &kp LEFT_CONTROL
                                  &kp LEFT_ALT  &kp BACKSPACE  &lt 1 SPACE                                                                 &lt 2 ENTER  &kp LEFT_SHIFT  &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        symbols {
            display-name = "SYMBOLS";
            bindings = <
&trans  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                                     &msc SCRL_UP                     &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &trans
&trans  &kp UNDERSCORE   &kp MINUS    &kp PLUS  &kp EQUAL   &kp GRAVE                  &msc SCRL_LEFT  &mkp RCLK       &msc SCRL_RIGHT  &kp LEFT   &kp DOWN       &kp UP        &kp RIGHT             &kp TILDE              &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp C_MUTE                    &msc SCRL_DOWN                   &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
                                      &trans    &trans      &trans                                                                      &trans     &kp DOT        &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        media_rgb_arrows {
            display-name = "MEDIA&MOVMENT";
            bindings = <
&rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD   &rgb_ug RGB_SPI                            &mmv MOVE_UP                     &trans      &trans          &kp UP_ARROW  &trans     &bt BT_PRV         &bt BT_NXT
&trans           &kp C_VOL_DN     &kp C_VOLUME_UP  &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp C_MUTE  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &ext_power EP_OFF  &ext_power EP_ON
&trans           &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFR  &rgb_ug RGB_TOG   &rgb_ug RGB_EFF  &trans                    &mmv MOVE_DOWN                   &trans      &trans          &trans        &trans     &trans             &trans
                                                   &trans           &trans            &trans                                                                      &trans      &trans          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse {
            bindings = <
&to 0  &trans  &trans          &msc SCRL_UP    &trans           &trans                       &trans          &trans     &trans          &mmv MOVE_UP    &trans           &trans  &trans
&trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &mkp MCLK            &trans  &trans  &trans  &mkp MCLK  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans     &trans            &trans          &trans     &trans          &trans          &trans           &trans  &trans
                                &trans          &mkp MB4         &mkp LCLK                                    &mkp RCLK  &mkp MB5        &trans
            >;
        };
    };
};
